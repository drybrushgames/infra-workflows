name: Deploy (Reusable)

on:
  workflow_call:
    inputs:
      host: { type: string, required: false, default: "vps-0b87e710.tail751d97.ts.net", description: "OVH host" }
    secrets:
      TAILSCALE_OAUTH_CLIENT_ID:
        required: true
      TAILSCALE_OAUTH_CLIENT_SECRET:
        required: true
      SVC_DB_PASSWORD:
        required: true
      DISCORD_WEBHOOK_URL:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Tailscale up
        uses: tailscale/github-action@v2
        with:
          oauth-client-id:  ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret:     ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
          tags:             tag:ci
          version:          1.76.1

      - name: Derive path and service
        id: derive
        run: |
          REPO="${GITHUB_REPOSITORY#*/}"
          echo "service=$REPO" >> $GITHUB_OUTPUT
          echo "path=/opt/$REPO" >> $GITHUB_OUTPUT

      - name: Build (optional)
        run: make build || true

      - name: Deploy code to server
        run: |
          # Create a tar archive of the code (excluding .git and node_modules for efficiency)
          tar --exclude='.git' --exclude='node_modules' --exclude='frontend/node_modules' --exclude='backend/node_modules' -czf - . | \
          tailscale ssh deploy@${{ inputs.host }} \
            "cd ${{ steps.derive.outputs.path }} && \
             tar -xzf - && \
             SERVICE_NAME=\"${{ steps.derive.outputs.service }}\" && \
             if [ \"$SERVICE_NAME\" = \"PiratePlunder\" ]; then \
               echo \"Installing PiratePlunder backend dependencies...\" && \
               cd backend && (command -v pnpm >/dev/null 2>&1 && pnpm i --prod || npm ci --omit=dev || npm i --omit=dev) && cd .. && \
               echo \"Preserving pre-built frontend assets with correct version...\" ; \
             elif [ -f package.json ]; then \
               command -v pnpm >/dev/null 2>&1 && pnpm i --prod || npm ci --omit=dev || npm i --omit=dev ; \
             fi && \
             sudo systemctl restart ${{ steps.derive.outputs.service }}.service || true && \
             echo 'Deploy OK for ${{ steps.derive.outputs.service }}'"

      - name: Debug Service Status
        if: success()
        continue-on-error: true
        run: |
          SERVICE="${{ steps.derive.outputs.service }}"
          echo "=== Checking service status ==="
          tailscale ssh deploy@${{ inputs.host }} \
            "sudo systemctl status ${SERVICE}.service || echo 'Could not get service status'"
          echo -e "\n=== Basic service check ==="
          tailscale ssh deploy@${{ inputs.host }} \
            "systemctl is-active ${SERVICE}.service || echo 'Service not active'"

      - name: Health Check
        if: success()
        continue-on-error: true
        run: |
          sleep 10 # Wait for service to fully restart
          SERVICE="${{ steps.derive.outputs.service }}"
          case "$SERVICE" in
            "menagerie")
              curl -fsS "http://${{ inputs.host }}:8080/health" || echo "Health check failed"
              ;;
            "pirateplunder"|"PiratePlunder") 
              curl -fsS "http://${{ inputs.host }}:3001/health" || echo "Health check failed"
              ;;
            "quietpm")
              curl -fsS "http://${{ inputs.host }}:8000/health" || echo "Health check failed"
              ;;
            *)
              curl -fsS "http://${{ inputs.host }}:8080/health" || echo "Health check failed"
              ;;
          esac

      - name: Notify Discord on Success
        if: success()
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: '✅ Deployment to ${{ inputs.host }} Succeeded! Service: ${{ steps.derive.outputs.service }} • Commit: ${{ github.sha }} by ${{ github.actor }}'

      - name: Get Failure Details
        if: failure()
        run: |
          SERVICE="${{ steps.derive.outputs.service }}"
          echo "Getting service logs for Discord notification..."
          
          # Get service status and logs
          STATUS=$(tailscale ssh deploy@${{ inputs.host }} \
            "sudo systemctl status ${SERVICE}.service --no-pager -l 2>/dev/null || echo 'Service status check failed'")
          LOGS=$(tailscale ssh deploy@${{ inputs.host }} \
            "sudo journalctl -u ${SERVICE}.service --since '5 minutes ago' --no-pager 2>/dev/null || echo 'Could not get journalctl logs'")
          
          # Also try to get application logs if they exist
          APP_LOGS=$(tailscale ssh deploy@${{ inputs.host }} \
            "ls -la ${{ steps.derive.outputs.path }}/logs/ 2>/dev/null && tail -10 ${{ steps.derive.outputs.path }}/logs/*.log 2>/dev/null || echo 'No app logs found'")
          
          # Truncate commit message to first 120 characters
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT_TRUNCATED=$(echo "$COMMIT_MSG" | head -c 120)
          if [ ${#COMMIT_MSG} -gt 120 ]; then
            COMMIT_TRUNCATED="${COMMIT_TRUNCATED}..."
          fi
          
          echo "COMMIT_TRUNCATED<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_TRUNCATED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "SERVICE_STATUS<<EOF" >> $GITHUB_ENV
          echo "$STATUS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "SERVICE_LOGS<<EOF" >> $GITHUB_ENV
          echo "$LOGS" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "--- Application Logs ---" >> $GITHUB_ENV
          echo "$APP_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Notify Discord on Failure
        if: failure()
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Deployment Failed** to ${{ inputs.host }}
            **Service:** ${{ steps.derive.outputs.service }} • **Author:** ${{ github.actor }} • **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ env.COMMIT_TRUNCATED }}
            
            **Service Status:**
            ```
            ${{ env.SERVICE_STATUS }}
            ```
            
            **Service Logs:**
            ```
            ${{ env.SERVICE_LOGS }}
            ```
            
            **Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}